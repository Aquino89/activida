package com.mx.Microservicios.SecurityConfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    http
	        .authorizeHttpRequests(auth -> auth
	            .requestMatchers("/error").permitAll()  // Allow error page access
	            .requestMatchers("/api/**").authenticated()  // Protect API endpoints
	        )
	        .httpBasic(withDefaults()); // Use basic authentication
	    return http.build();
	}

	private Customizer<HttpBasicConfigurer<HttpSecurity>> withDefaults() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Bean
	SecurityFilterChain securityFilterChain1(HttpSecurity http) throws Exception {
	    http
	        .csrf(csrf -> csrf.disable())  // Disable CSRF for testing
	        .authorizeHttpRequests(auth -> auth
	            .requestMatchers("/error").permitAll()
	            .requestMatchers("/api/**").authenticated()
	        )
	        .httpBasic(withDefaults());
	    return http.build();
	}
	
	@Bean
	UserDetailsService userDetailsService() {
	    UserDetails user = User.builder()
	        .username("admin")
	        .password("{noop}password")  // No encryption for testing
	        .roles("USER")  // Spring will automatically prefix this with "ROLE_"
	        .build();
	    return new InMemoryUserDetailsManager(user);
	}
}
